import numpy as np 
from matplotlib import pyplot as plt
#import matplotlib as mpl
#import random # DON'T USE (since want np.random seed, not random seed!)

np.random.seed(419)

NB_DOCS = 48
DOC_LEN = 120 
NB_SYLLABLES = 120
NB_SUB_RULES_PER_TYPE = 120

def sample(L, ps):
    r = np.random.random()
    for l,p in zip(L,ps):
        r-=p
        if r<=0 : return l
def pair_with_probs(L):
    freqs = np.random.exponential(size=len(L)) 
    freqs /= np.sum(freqs)
    return L,freqs

vowels, vfreqs = pair_with_probs('aeiou')
consns, cfreqs = pair_with_probs('bcdfghjklmnpqrstvwxyz')

syllables = set([(C0+V+C1) for _ in range(NB_SYLLABLES)
                           for C0 in [sample(consns, cfreqs)]
                           for V  in [sample(vowels, vfreqs)]
                           for C1 in [sample(consns, cfreqs)]])

syllables = sorted(syllables)

for K in range(0,len(syllables),12):
    print('  '.join(syllables[K:K+12]))

syllables, sfreqs = pair_with_probs(syllables)

vcc_sub_rules = set([(V+C0+C1,V  ) for _ in range(NB_SUB_RULES_PER_TYPE)
                                   for V  in [sample(vowels, vfreqs)] 
                                   for C0 in [sample(consns, cfreqs)]
                                   for C1 in [sample(consns, cfreqs)]
                                   for C  in [sample(consns, cfreqs)]])
ccv_sub_rules = set([(C0+C1+V,  C) for _ in range(NB_SUB_RULES_PER_TYPE)
                                   for V  in [sample(vowels, vfreqs)] 
                                   for C0 in [sample(consns, cfreqs)]
                                   for C1 in [sample(consns, cfreqs)]
                                   for C  in [sample(consns, cfreqs)]])
vvc_sub_rules = set([(V0+V1+C,  V) for _ in range(NB_SUB_RULES_PER_TYPE)
                                   for C  in [sample(consns, cfreqs)] 
                                   for V0 in [sample(vowels, vfreqs)]
                                   for V1 in [sample(vowels, vfreqs)]
                                   for V  in [sample(vowels, vfreqs)]])
cvc_sub_rules = set([(C0+V+C1,V+C) for _ in range(NB_SUB_RULES_PER_TYPE)
                                   for V  in [sample(vowels, vfreqs)] 
                                   for C0 in [sample(consns, cfreqs)]
                                   for C1 in [sample(consns, cfreqs)]
                                   for C  in [sample(consns, cfreqs)]])

sub_rules = (sorted(vcc_sub_rules)
            +sorted(ccv_sub_rules)
            +sorted(vvc_sub_rules)
            +sorted(cvc_sub_rules))

def word():
    base = ''.join(sample(syllables, sfreqs) for _ in range(3))
    for (k,v) in sub_rules:
        base = base.replace(k,v)
    return base

for _ in range(10):
    print(word())



#plt.imsave('tab.png', img)


